@page "/DoggoProfile/{id:int}"
@using Microsoft.AspNetCore.Authorization
@using DogMatch.Client.Services
@using DogMatch.Client.Components.DogProfile

@attribute [Authorize]
@inject DogProfileState state

<AuthorizeView>
    <Authorized>
        <MatH2>@state.Profile?.Dog?.Name</MatH2>
        <br />

        @if (state.Profile?.Dog == null)
        {
            <div class="col-lg-12">
                <Flow Size="200px" Color="#003366" Center="true" />
            </div>
        }
        else
        {
            <DogCard />
            <div class="center-align">
                @if (state.Profile?.Dog?.Owner == context.User.Identity.Name)
                {
                    <div class="center-row">
                        <ProfileNavigator DogId="state.Profile?.Dog?.Id ?? 0" />
                    </div>
                }

                <MatDivider Padded="true" Class="margin-ten-top-bottom" />
                <TemperamentGraph />
                <MatDivider Padded="true" Class="margin-ten-top-bottom" />

                @if (state.Profile?.Dog?.Owner == context.User.Identity.Name)
                {
                    <div class="center-row margin-ten-top-bottom">
                        <DeleteProfile DogId="state.Profile?.Dog?.Id ?? 0"
                                       DogName="@state.Profile?.Dog?.Name" />
                    </div>
                }
            </div>
        }
        <br />
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        state.OnChange += RefreshComponent;
        await state.GetDoggo(Id);
    }

    private void RefreshComponent() => StateHasChanged();
}
