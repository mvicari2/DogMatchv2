@using DogMatch.Client.Services

@inject IJSRuntime JSRuntime
@inject DogProfileState state

<div class="modal @modalClass"
     tabindex="-1"
     role="dialog"
     style="display:@modalDisplay">
    <div class="modal-dialog" role="document" style="max-width:90%!important;">
        <div class="modal-content">
            <div class="modal-header" style="height:60px;">
                <div class="album-btn-container">
                    <span class="album-btn-group">
                        <MatIconButton OnClick="() => ChangeImage(ImageDirection.Backward)"
                                       Disabled="index == 0"
                                       Icon="arrow_back_ios"
                                       Class="material-icon-btn" />
                        <button @onclick="() => OpenFullSizeImage(ImageStr)"
                                type="button"
                                class="btn btn-primary"
                                style="margin-top: -12px">
                            Open Full Size
                        </button>
                        <MatIconButton OnClick="() => ChangeImage(ImageDirection.Forward)"
                                       Disabled="index >= (imageCount - 1)"
                                       Icon="arrow_forward_ios"
                                       Class="material-icon-btn" />
                    </span>
                    <MatIconButton Class="float-right material-icon-btn"
                                   OnClick="@Close"
                                   Icon="close" />
                </div>
            </div>
            <div class="modal-body">
                <div class="modal-image-container">
                    <img src="@ImageStr" class="modal-album-img" />
                </div>
            </div>
        </div>
    </div>
</div>

@if (showBackdrop)
{
    <div class="modal-backdrop fade show" />
}

@code {
    #region Variables
    private string ImageStr { get; set; }
    private string modalDisplay = "none;";
    private string modalClass = "";
    private bool showBackdrop = false;
    private int imageCount = 0;
    private int index = 0;
    #endregion Variables

    #region Methods
    /// <summary>
    /// Opens album image modal and displays selected image
    /// </summary>
    /// <param name="i">index <see cref="int"/> of selected image from album list</param>
    public void Open(int i)
    {
        imageCount = state.Profile.AlbumImages.Count();
        index = i;
        SetImage();
        modalDisplay = "block;";
        modalClass = "Show";
        showBackdrop = true;
        StateHasChanged();
    }

    /// <summary>
    /// Closes album image modal
    /// </summary>
    public void Close()
    {
        ImageStr = string.Empty;
        index = 0;
        modalDisplay = "none";
        modalClass = "";
        showBackdrop = false;
        StateHasChanged();
    }

    /// <summary>
    /// Changes image by moving backward or forward through the album image list
    /// </summary>
    /// <param name="direction"><see cref="ImageDirection"/> type</param>
    private void ChangeImage(ImageDirection direction)
    {
        if (direction == ImageDirection.Forward)
            index = index + 1;
        else if (direction == ImageDirection.Backward)
            index = index - 1;

        SetImage();
    }

    /// <summary>
    /// Sets displayed image string using current image list index
    /// </summary>
    private void SetImage() =>
        ImageStr = state.Profile.AlbumImages[index].ImageString;

    /// <summary>
    /// Opens passed image string in new tab (full size)
    /// </summary>
    /// <param name="imgStr">Selected image <see cref="string"/></param>
    private async Task OpenFullSizeImage(string imgStr) =>
        await JSRuntime.InvokeAsync<object>("open", imgStr, "_blank");
    #endregion Methods

    #region Direction Types
    /// <summary>
    /// Image direction type enum
    /// </summary>
    private enum ImageDirection
    {
        Forward = 1,
        Backward = 2
    }
    #endregion Direction Types
}