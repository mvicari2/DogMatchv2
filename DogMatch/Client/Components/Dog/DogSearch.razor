@using DogMatch.Client.Services
@inject DogState state

<div class="row search-row">
    <MatThemeProvider Theme="@SearchTheme">
        <form @onsubmit="() => Search()">
            <div class="form-group dog-search">
                <span class="form-control-feedback">
                    <MatIcon Icon="@MatIconNames.Search" Class="icon-align" />
                </span>
                <input type="search"
                       class="form-control"
                       placeholder="Search Dogs..."
                       @bind-value="searchStr" />
            </div>
        </form>

        <MatTooltip Position="@MatTooltipPosition.Top"
                    Tooltip="Search Now"
                    TargetId="search_btn">
            <MatButton OnClick="() => Search()"
                       Unelevated="true"
                       Class="btn btn-primary search-btn"
                       Id="search_btn">
                <MatIcon Icon="@MatIconNames.Search" Class="icon-align" />
            </MatButton>
        </MatTooltip>


        @if (searched) // show refresh btn if currently displaying search results
        {
            <MatTooltip Position="@MatTooltipPosition.Top"
                        Tooltip="Refresh Dogs"
                        TargetId="refresh_btn">
                <MatButton OnClick="() => RefreshDogs()"
                           Unelevated="true"
                           Class="btn btn-primary search-btn"
                           Id="refresh_btn">
                    <MatIcon Icon="@MatIconNames.Refresh" Class="icon-align" />
                </MatButton>
            </MatTooltip>
            <span class="search-btn" style="margin-top:12px;color:#275381;">
                <MatCaption>@resultsCount Dogs Found</MatCaption>
            </span>
        }
    </MatThemeProvider>
</div>

@code {
    private string searchStr = string.Empty;
    private bool searched = false;
    private int resultsCount = 0;

    /// <summary>
    /// Call state method to search dogs
    /// </summary>
    /// <returns></returns>
    private async Task Search()
    {
        if (!string.IsNullOrWhiteSpace(searchStr))
        {
            // show loading animation by clearing doggos
            state.Doggos = null;
            state.NotifyStateChanged();

            // call search / get dogs
            await state.GetAllDoggos(searchStr);
            searched = true;
            resultsCount = state.Doggos.Count();
            state.NotifyStateChanged();
        }
    }

    private async Task RefreshDogs()
    {
        // show loading animation by clearing doggos and clear search
        state.Doggos = null;
        searchStr = string.Empty;
        searched = false;
        resultsCount = 0;
        state.NotifyStateChanged();

        // get dogs
        await state.GetAllDoggos();
        state.NotifyStateChanged();
    }

    /// <summary>
    /// Initialize new color scheme for Search components
    /// </summary>
    MatTheme SearchTheme = new MatTheme() { Primary = "#275381" };
}