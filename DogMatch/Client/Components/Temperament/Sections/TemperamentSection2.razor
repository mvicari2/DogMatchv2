@using DogMatch.Client.Services
@inject TemperamentState state

<div>
    <MatH5>Overall Friendliness Rating</MatH5>
    <TemperamentFormField Value="@(state.Temperament.FriendlinessOverall ?? 0)"
                          Name="FriendlinessOverall" />
    <br />
    <MatH5>Good with People Rating</MatH5>
    <TemperamentFormField Value="@(state.Temperament.GoodWithPeople ?? 0)"
                          Name="GoodWithPeople" />
    <br />
    <MatH5>Good with Other Dogs Rating</MatH5>
    <TemperamentFormField Value="@(state.Temperament.GoodWithOtherDogs ?? 0)"
                          Name="GoodWithOtherDogs" />
    <br />
    <MatH5>Good with Cats Rating</MatH5>
    <TemperamentFormField Value="@(state.Temperament.GoodWithCats ?? 0)"
                          Name="GoodWithCats" />
    <br />
    <MatH5>Good with Other Animals Rating</MatH5>
    <TemperamentFormField Value="@(state.Temperament.GoodWithOtherAnimals ?? 0)"
                          Name="GoodWithOtherAnimals" />
    <br />
    <MatH5>Good with Children Rating</MatH5>
    <TemperamentFormField Value="@(state.Temperament.GoodWithChildren ?? 0)"
                          Name="GoodWithChildren" />
</div>

@code {
    protected override void OnInitialized() => state.OnChange += RefreshComponent;
    private void RefreshComponent() => StateHasChanged();
}
