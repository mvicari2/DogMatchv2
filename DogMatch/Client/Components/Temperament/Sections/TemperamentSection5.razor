@using DogMatch.Client.Services
@inject TemperamentState state

<div>
    <MatH5>Sense Of Smell Rating</MatH5>
    <TemperamentFormField Value="@(state.Temperament.SenseOfSmell ?? 0)"
                          Name="SenseOfSmell" />
    <br />
    <MatH5>Prey Drive Rating</MatH5>
    <TemperamentFormField Value="@(state.Temperament.PreyDrive ?? 0)"
                          Name="PreyDrive" />
    <br />
    <MatH5>Aggression Level Rating</MatH5>
    <TemperamentFormField Value="@(state.Temperament.AggressionLevel ?? 0)"
                          Name="AggressionLevel" />
    <br />
    <MatH5>Protectiveness Rating</MatH5>
    <TemperamentFormField Value="@(state.Temperament.Protectiveness ?? 0)"
                          Name="Protectiveness" />
    <br />
    <MatH5>Distinguishes Threatening Situations Rating</MatH5>
    <TemperamentFormField Value="@(state.Temperament.DistinguishThreatening ?? 0)"
                          Name="DistinguishThreatening" />
    <br />
    <MatH5>Balance and Stability Rating</MatH5>
    <TemperamentFormField Value="@(state.Temperament.BalanceStability ?? 0)"
                          Name="BalanceStability" />
    <br />
    <MatH5>Confidence Rating</MatH5>
    <TemperamentFormField Value="@(state.Temperament.Confidence ?? 0)"
                          Name="Confidence" />
</div>

@code {
    protected override void OnInitialized() => state.OnChange += RefreshComponent;
    private void RefreshComponent() => StateHasChanged();
}
