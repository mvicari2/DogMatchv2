// <auto-generated />
using System;
using DogMatch.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DogMatch.Domain.Migrations
{
    [DbContext(typeof(DogMatchDbContext))]
    [Migration("20200829222351_DogMatchInitiaDbConfig")]
    partial class DogMatchInitiaDbConfig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DogMatch.Domain.Data.Models.Addresses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("AddressGUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Apt")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DogMatch.Domain.Data.Models.Biography", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutDoggo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BiographyGUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DogId")
                        .HasColumnType("int");

                    b.Property<string>("FavoriteFoods")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FavoriteMemory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FavoriteSleepLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FavoriteToy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FavoriteWalkLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DogId")
                        .IsUnique();

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Biography");
                });

            modelBuilder.Entity("DogMatch.Domain.Data.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ColorGUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ColorString")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DogId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DogId");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("DogMatch.Domain.Data.Models.DogImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DogId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<Guid>("DogImageGUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsProfileImage")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DogId");

                    b.ToTable("DogImages");
                });

            modelBuilder.Entity("DogMatch.Domain.Data.Models.DogMatchUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MI")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PrimaryAddressId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserGUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int?>("UserImageId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PrimaryAddressId")
                        .IsUnique()
                        .HasFilter("[PrimaryAddressId] IS NOT NULL");

                    b.HasIndex("UserImageId")
                        .IsUnique()
                        .HasFilter("[UserImageId] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DogMatch.Domain.Data.Models.Dogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("BiographyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<string>("Breed")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("DogGUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Gender")
                        .HasColumnType("char(1)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ProfileImageId")
                        .HasColumnType("int");

                    b.Property<int?>("TemperamentId")
                        .HasColumnType("int");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("BiographyId")
                        .IsUnique()
                        .HasFilter("[BiographyId] IS NOT NULL");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProfileImageId")
                        .IsUnique()
                        .HasFilter("[ProfileImageId] IS NOT NULL");

                    b.HasIndex("TemperamentId")
                        .IsUnique()
                        .HasFilter("[TemperamentId] IS NOT NULL");

                    b.ToTable("Dogs");
                });

            modelBuilder.Entity("DogMatch.Domain.Data.Models.Temperament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AggressionLevel")
                        .HasColumnType("int");

                    b.Property<int?>("Anxiety")
                        .HasColumnType("int");

                    b.Property<int?>("AthleticLevel")
                        .HasColumnType("int");

                    b.Property<int?>("BalanceStability")
                        .HasColumnType("int");

                    b.Property<int?>("Barking")
                        .HasColumnType("int");

                    b.Property<int?>("Confidence")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DistinguishThreatening")
                        .HasColumnType("int");

                    b.Property<int?>("DogId")
                        .HasColumnType("int");

                    b.Property<int?>("Empathetic")
                        .HasColumnType("int");

                    b.Property<int?>("Fearful")
                        .HasColumnType("int");

                    b.Property<int?>("FriendlinessOverall")
                        .HasColumnType("int");

                    b.Property<int?>("GoodWithCats")
                        .HasColumnType("int");

                    b.Property<int?>("GoodWithChildren")
                        .HasColumnType("int");

                    b.Property<int?>("GoodWithOtherAnimals")
                        .HasColumnType("int");

                    b.Property<int?>("GoodWithOtherDogs")
                        .HasColumnType("int");

                    b.Property<int?>("GoodWithPeople")
                        .HasColumnType("int");

                    b.Property<bool?>("HairOrFur")
                        .HasColumnType("bit");

                    b.Property<bool?>("Housebroken")
                        .HasColumnType("bit");

                    b.Property<int?>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int?>("IsAfraidFireworks")
                        .HasColumnType("int");

                    b.Property<bool?>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<int?>("IsPickyEater")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("LikesExcersize")
                        .HasColumnType("int");

                    b.Property<int?>("LikesPlayingDogs")
                        .HasColumnType("int");

                    b.Property<int?>("LikesPlayingHumans")
                        .HasColumnType("int");

                    b.Property<int?>("LikesToys")
                        .HasColumnType("int");

                    b.Property<int?>("LikesTreats")
                        .HasColumnType("int");

                    b.Property<bool?>("OutsideOrInside")
                        .HasColumnType("bit");

                    b.Property<int?>("Playfulness")
                        .HasColumnType("int");

                    b.Property<int?>("PlaysFetch")
                        .HasColumnType("int");

                    b.Property<int?>("PreyDrive")
                        .HasColumnType("int");

                    b.Property<int?>("Protectiveness")
                        .HasColumnType("int");

                    b.Property<int?>("SenseOfSmell")
                        .HasColumnType("int");

                    b.Property<int?>("Shedding")
                        .HasColumnType("int");

                    b.Property<int?>("SmellRating")
                        .HasColumnType("int");

                    b.Property<int?>("Stubbornness")
                        .HasColumnType("int");

                    b.Property<Guid>("TemperamentGUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int?>("Trainability")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DogId")
                        .IsUnique()
                        .HasFilter("[DogId] IS NOT NULL");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Temperament");
                });

            modelBuilder.Entity("DogMatch.Domain.Data.Models.UserImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsProfileImage")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserImageGUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DogMatch.Domain.Data.Models.Addresses", b =>
                {
                    b.HasOne("DogMatch.Domain.Data.Models.DogMatchUser", "CreatedByUser")
                        .WithMany("AddressesCreatedByUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Addresses_CreatedByUser");

                    b.HasOne("DogMatch.Domain.Data.Models.DogMatchUser", "ModifiedByUser")
                        .WithMany("AddressesModifiedByUser")
                        .HasForeignKey("LastModifiedBy")
                        .HasConstraintName("FK_Addresses_ModifiedByUser");

                    b.HasOne("DogMatch.Domain.Data.Models.DogMatchUser", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Addresses_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DogMatch.Domain.Data.Models.Biography", b =>
                {
                    b.HasOne("DogMatch.Domain.Data.Models.DogMatchUser", "CreatedByUser")
                        .WithMany("BiographiesCreatedByUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Biographies_CreatedByUser");

                    b.HasOne("DogMatch.Domain.Data.Models.DogMatchUser", "ModifiedByUser")
                        .WithMany("BiographiesModifiedByUser")
                        .HasForeignKey("LastModifiedBy")
                        .HasConstraintName("FK_Biographies_ModifiedByUser");
                });

            modelBuilder.Entity("DogMatch.Domain.Data.Models.Color", b =>
                {
                    b.HasOne("DogMatch.Domain.Data.Models.Dogs", "Dog")
                        .WithMany("Colors")
                        .HasForeignKey("DogId")
                        .HasConstraintName("FK_Color_Dog")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DogMatch.Domain.Data.Models.DogImages", b =>
                {
                    b.HasOne("DogMatch.Domain.Data.Models.DogMatchUser", "CreatedByUser")
                        .WithMany("DogAlbumImages")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Album_CreatedByUser");

                    b.HasOne("DogMatch.Domain.Data.Models.Dogs", "Dog")
                        .WithMany("AlbumImages")
                        .HasForeignKey("DogId")
                        .HasConstraintName("FK_AlbumImage_Dog")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DogMatch.Domain.Data.Models.DogMatchUser", b =>
                {
                    b.HasOne("DogMatch.Domain.Data.Models.Addresses", "PrimaryAddress")
                        .WithOne("PrimaryAddressUser")
                        .HasForeignKey("DogMatch.Domain.Data.Models.DogMatchUser", "PrimaryAddressId")
                        .HasConstraintName("FK_User_PrimaryAddress");

                    b.HasOne("DogMatch.Domain.Data.Models.UserImages", "UserProfileImage")
                        .WithOne("ProfileImageUser")
                        .HasForeignKey("DogMatch.Domain.Data.Models.DogMatchUser", "UserImageId")
                        .HasConstraintName("FK_DogMatchUser_UserProfileImage");
                });

            modelBuilder.Entity("DogMatch.Domain.Data.Models.Dogs", b =>
                {
                    b.HasOne("DogMatch.Domain.Data.Models.Addresses", "Address")
                        .WithMany("Dogs")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Dogs_Address");

                    b.HasOne("DogMatch.Domain.Data.Models.Biography", "Biography")
                        .WithOne("Dog")
                        .HasForeignKey("DogMatch.Domain.Data.Models.Dogs", "BiographyId")
                        .HasConstraintName("FK_Dog_Biography");

                    b.HasOne("DogMatch.Domain.Data.Models.DogMatchUser", "CreatedByUser")
                        .WithMany("DogsCreatedByUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Dogs_CreatedByUser");

                    b.HasOne("DogMatch.Domain.Data.Models.DogMatchUser", "ModifiedByUser")
                        .WithMany("DogsModifiedByUser")
                        .HasForeignKey("LastModifiedBy")
                        .HasConstraintName("FK_Dogs_ModifiedByUser");

                    b.HasOne("DogMatch.Domain.Data.Models.DogMatchUser", "Owner")
                        .WithMany("Dogs")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_Dogs_Owner");

                    b.HasOne("DogMatch.Domain.Data.Models.DogImages", "DogProfileImage")
                        .WithOne("ProfileImageDog")
                        .HasForeignKey("DogMatch.Domain.Data.Models.Dogs", "ProfileImageId")
                        .HasConstraintName("FK_Dog_ProfileImage");

                    b.HasOne("DogMatch.Domain.Data.Models.Temperament", "Temperament")
                        .WithOne("Dog")
                        .HasForeignKey("DogMatch.Domain.Data.Models.Dogs", "TemperamentId")
                        .HasConstraintName("FK_Dog_Temperament");
                });

            modelBuilder.Entity("DogMatch.Domain.Data.Models.Temperament", b =>
                {
                    b.HasOne("DogMatch.Domain.Data.Models.DogMatchUser", "CreatedByUser")
                        .WithMany("TemperamentsCreatedByUser")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Temperaments_CreatedByUser");

                    b.HasOne("DogMatch.Domain.Data.Models.DogMatchUser", "ModifiedByUser")
                        .WithMany("TemperamentsModifiedByUser")
                        .HasForeignKey("LastModifiedBy")
                        .HasConstraintName("FK_Temperaments_ModifiedByUser");
                });

            modelBuilder.Entity("DogMatch.Domain.Data.Models.UserImages", b =>
                {
                    b.HasOne("DogMatch.Domain.Data.Models.DogMatchUser", "CreatedByUser")
                        .WithMany("UserImagesCreatedBy")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_UserImages_CreatedByUser");

                    b.HasOne("DogMatch.Domain.Data.Models.DogMatchUser", "User")
                        .WithMany("UserImages")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserImages_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DogMatch.Domain.Data.Models.DogMatchUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DogMatch.Domain.Data.Models.DogMatchUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DogMatch.Domain.Data.Models.DogMatchUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DogMatch.Domain.Data.Models.DogMatchUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
